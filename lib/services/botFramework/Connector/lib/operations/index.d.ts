/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Attachments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BotConnector.
 */
export interface Attachments {


    /**
     * @summary GetAttachmentInfo
     *
     * Gets information about the specified attachment, including file name, type,
     * and the available views (e.g., original or thumbnail).
     *
     * @param {string} attachmentId Attachment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AttachmentInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAttachmentInfoWithHttpOperationResponse(attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AttachmentInfo>>;

    /**
     * @summary GetAttachmentInfo
     *
     * Gets information about the specified attachment, including file name, type,
     * and the available views (e.g., original or thumbnail).
     *
     * @param {string} attachmentId Attachment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AttachmentInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AttachmentInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AttachmentInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAttachmentInfo(attachmentId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AttachmentInfo>;
    getAttachmentInfo(attachmentId: string, callback: ServiceCallback<models.AttachmentInfo>): void;
    getAttachmentInfo(attachmentId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AttachmentInfo>): void;


    /**
     * @summary GetAttachment
     *
     * Gets the specified view of the specified attachment as binary content.
     *
     * @param {string} attachmentId Attachment ID.
     *
     * @param {string} viewId View ID from attachmentInfo
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Buffer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAttachmentWithHttpOperationResponse(attachmentId: string, viewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<Buffer>>;

    /**
     * @summary GetAttachment
     *
     * Gets the specified view of the specified attachment as binary content.
     *
     * @param {string} attachmentId Attachment ID.
     *
     * @param {string} viewId View ID from attachmentInfo
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Buffer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Buffer} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAttachment(attachmentId: string, viewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<Buffer>;
    getAttachment(attachmentId: string, viewId: string, callback: ServiceCallback<Buffer>): void;
    getAttachment(attachmentId: string, viewId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<Buffer>): void;
}

/**
 * @class
 * Conversations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the BotConnector.
 */
export interface Conversations {


    /**
     * @summary CreateConversation
     *
     * Create a new Conversation.
     *
     * POST to this method with a
     * * Bot being the bot creating the conversation
     * * IsGroup set to true if this is not a direct message (default is false)
     * * Members array containing the members you want to have be in the
     * conversation.
     *
     * The return value is a ResourceResponse which contains a conversation id
     * which is suitable for use
     * in the message payload and REST API uris.
     *
     * Most channels only support the semantics of bots initiating a direct message
     * conversation.  An example of how to do that would be:
     *
     * ```
     * var resource = await connector.conversations.CreateConversation(new
     * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
     * ChannelAccount("user1") } );
     * await connect.Conversations.SendToConversationAsync(resource.Id, new
     * Activity() ... ) ;
     *
     * ```
     *
     * @param {object} parameters Parameters to create the conversation from.
     *
     * @param {boolean} [parameters.isGroup] Indicates if this is a group
     * conversation.
     *
     * @param {object} parameters.bot The bot address for this conversation.
     *
     * @param {array} parameters.members Members to add to the conversation.
     *
     * @param {string} [parameters.topicName] (Optional) Topic title of a
     * conversation (if supported by the channel).
     *
     * @param {object} [parameters.activity] (Optional) Use this activity as the
     * initial message to the conversation when creating a new conversation.
     *
     * @param {string} parameters.activity.type The type of the activity. Possible
     * values include: 'message', 'conversationUpdate', 'contactRelationUpdate',
     * 'typing', 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [parameters.activity.id] ID that uniquely identifies the
     * activity on the channel.
     *
     * @param {date} [parameters.activity.timestamp] Date and time that the message
     * was sent in the UTC time zone (set by service).
     *
     * @param {date} [parameters.activity.localTimestamp] Date and time that the
     * message was sent in the local time zone (set by client).
     *
     * @param {string} [parameters.activity.serviceUrl] Service endpoint where
     * operations concerning the activity may be performed.
     *
     * @param {string} [parameters.activity.channelId] ID of the channel where the
     * activity was sent.
     *
     * @param {object} parameters.activity.from Sender address.
     *
     * @param {object} [parameters.activity.conversation] Channel account
     * information.
     *
     * @param {object} parameters.activity.recipient (Outbound to bot only) Bot's
     * address that received the message.
     *
     * @param {string} [parameters.activity.textFormat] Format of text fields.
     * Default: markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
     * with multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [parameters.activity.membersAdded] Members added to the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [parameters.activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [parameters.activity.reactionsAdded] Reactions added to the
     * activity.
     *
     * @param {array} [parameters.activity.reactionsRemoved] Reactions removed from
     * the activity.
     *
     * @param {string} [parameters.activity.topicName] The conversation's updated
     * topic name.
     *
     * @param {boolean} [parameters.activity.historyDisclosed] True if prior
     * history of the channel is disclosed. Default value is false.
     *
     * @param {string} [parameters.activity.locale] Locale of the language that
     * should be used to display text within the message.
     *
     * @param {string} [parameters.activity.text] Content for the message.
     *
     * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
     * response.
     *
     * @param {string} [parameters.activity.inputHint] Value that indicates whether
     * your bot is accepting, expecting, or ignoring user input after the message
     * is delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [parameters.activity.summary] Text to display if the channel
     * cannot render cards.
     *
     * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
     * used to provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [parameters.activity.suggestedActions.to] Ids of the
     * recipients that the actions should be shown to. These Ids are relative to
     * the channelId and a subset of all recipients of the activity.
     *
     * @param {array} [parameters.activity.suggestedActions.actions] Actions that
     * can be shown to the user.
     *
     * @param {array} [parameters.activity.attachments] List of Attachments.
     *
     * @param {array} [parameters.activity.entities] Collection of Entity objects,
     * each of which contains metadata about this activity. Each Entity object is
     * typed.
     *
     * @param {object} [parameters.activity.channelData] Channel-specific payload.
     *
     * @param {string} [parameters.activity.action] The action to apply or that was
     * applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [parameters.activity.replyToId] The original ID this message
     * is a response to.
     *
     * @param {object} [parameters.activity.value] Open-ended value.
     *
     * @param {string} [parameters.activity.name] Name of the operation to invoke
     * or the name of the event.
     *
     * @param {object} [parameters.activity.relatesTo] Reference to another
     * conversation or activity.
     *
     * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
     * the activity to refer to.
     *
     * @param {object} [parameters.activity.relatesTo.user] (Optional) User
     * participating in this conversation.
     *
     * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
     * this conversation.
     *
     * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
     * user or bot on this channel (Example: joe@smith.com, or @joesmith or
     * 123456).
     *
     * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
     * name.
     *
     * @param {object} [parameters.activity.relatesTo.conversation] Conversation
     * reference.
     *
     * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
     * this a reference to a group.
     *
     * @param {string} [parameters.activity.relatesTo.conversation.id] The ID that
     * identifies the conversation. The ID is unique per channel. If the channel
     * starts the conversion, it sets this ID; otherwise, the bot sets this
     * property to the ID that it gets back in the response when it starts the
     * conversation (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [parameters.activity.relatesTo.conversation.name] A display
     * name that can be used to identify the conversation.
     *
     * @param {string} [parameters.activity.relatesTo.channelId] An ID that
     * uniquely identifies the channel in the conversation that this object
     * references.
     *
     * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
     * where operations concerning the referenced conversation may be performed.
     *
     * @param {string} [parameters.activity.code] Code indicating why the
     * conversation has ended.
     *
     * @param {object} [parameters.channelData] Channel specific payload for
     * creating the conversation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConversationResourceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createConversationWithHttpOperationResponse(parameters: models.ConversationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConversationResourceResponse>>;

    /**
     * @summary CreateConversation
     *
     * Create a new Conversation.
     *
     * POST to this method with a
     * * Bot being the bot creating the conversation
     * * IsGroup set to true if this is not a direct message (default is false)
     * * Members array containing the members you want to have be in the
     * conversation.
     *
     * The return value is a ResourceResponse which contains a conversation id
     * which is suitable for use
     * in the message payload and REST API uris.
     *
     * Most channels only support the semantics of bots initiating a direct message
     * conversation.  An example of how to do that would be:
     *
     * ```
     * var resource = await connector.conversations.CreateConversation(new
     * ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
     * ChannelAccount("user1") } );
     * await connect.Conversations.SendToConversationAsync(resource.Id, new
     * Activity() ... ) ;
     *
     * ```
     *
     * @param {object} parameters Parameters to create the conversation from.
     *
     * @param {boolean} [parameters.isGroup] Indicates if this is a group
     * conversation.
     *
     * @param {object} parameters.bot The bot address for this conversation.
     *
     * @param {array} parameters.members Members to add to the conversation.
     *
     * @param {string} [parameters.topicName] (Optional) Topic title of a
     * conversation (if supported by the channel).
     *
     * @param {object} [parameters.activity] (Optional) Use this activity as the
     * initial message to the conversation when creating a new conversation.
     *
     * @param {string} parameters.activity.type The type of the activity. Possible
     * values include: 'message', 'conversationUpdate', 'contactRelationUpdate',
     * 'typing', 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [parameters.activity.id] ID that uniquely identifies the
     * activity on the channel.
     *
     * @param {date} [parameters.activity.timestamp] Date and time that the message
     * was sent in the UTC time zone (set by service).
     *
     * @param {date} [parameters.activity.localTimestamp] Date and time that the
     * message was sent in the local time zone (set by client).
     *
     * @param {string} [parameters.activity.serviceUrl] Service endpoint where
     * operations concerning the activity may be performed.
     *
     * @param {string} [parameters.activity.channelId] ID of the channel where the
     * activity was sent.
     *
     * @param {object} parameters.activity.from Sender address.
     *
     * @param {object} [parameters.activity.conversation] Channel account
     * information.
     *
     * @param {object} parameters.activity.recipient (Outbound to bot only) Bot's
     * address that received the message.
     *
     * @param {string} [parameters.activity.textFormat] Format of text fields.
     * Default: markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [parameters.activity.attachmentLayout] Hint for how to deal
     * with multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [parameters.activity.membersAdded] Members added to the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [parameters.activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [parameters.activity.reactionsAdded] Reactions added to the
     * activity.
     *
     * @param {array} [parameters.activity.reactionsRemoved] Reactions removed from
     * the activity.
     *
     * @param {string} [parameters.activity.topicName] The conversation's updated
     * topic name.
     *
     * @param {boolean} [parameters.activity.historyDisclosed] True if prior
     * history of the channel is disclosed. Default value is false.
     *
     * @param {string} [parameters.activity.locale] Locale of the language that
     * should be used to display text within the message.
     *
     * @param {string} [parameters.activity.text] Content for the message.
     *
     * @param {string} [parameters.activity.speak] SSML Speak for TTS audio
     * response.
     *
     * @param {string} [parameters.activity.inputHint] Value that indicates whether
     * your bot is accepting, expecting, or ignoring user input after the message
     * is delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [parameters.activity.summary] Text to display if the channel
     * cannot render cards.
     *
     * @param {object} [parameters.activity.suggestedActions] SuggestedActions are
     * used to provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [parameters.activity.suggestedActions.to] Ids of the
     * recipients that the actions should be shown to. These Ids are relative to
     * the channelId and a subset of all recipients of the activity.
     *
     * @param {array} [parameters.activity.suggestedActions.actions] Actions that
     * can be shown to the user.
     *
     * @param {array} [parameters.activity.attachments] List of Attachments.
     *
     * @param {array} [parameters.activity.entities] Collection of Entity objects,
     * each of which contains metadata about this activity. Each Entity object is
     * typed.
     *
     * @param {object} [parameters.activity.channelData] Channel-specific payload.
     *
     * @param {string} [parameters.activity.action] The action to apply or that was
     * applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [parameters.activity.replyToId] The original ID this message
     * is a response to.
     *
     * @param {object} [parameters.activity.value] Open-ended value.
     *
     * @param {string} [parameters.activity.name] Name of the operation to invoke
     * or the name of the event.
     *
     * @param {object} [parameters.activity.relatesTo] Reference to another
     * conversation or activity.
     *
     * @param {string} [parameters.activity.relatesTo.activityId] (Optional) ID of
     * the activity to refer to.
     *
     * @param {object} [parameters.activity.relatesTo.user] (Optional) User
     * participating in this conversation.
     *
     * @param {object} [parameters.activity.relatesTo.bot] Bot participating in
     * this conversation.
     *
     * @param {string} [parameters.activity.relatesTo.bot.id] Channel id for the
     * user or bot on this channel (Example: joe@smith.com, or @joesmith or
     * 123456).
     *
     * @param {string} [parameters.activity.relatesTo.bot.name] Display friendly
     * name.
     *
     * @param {object} [parameters.activity.relatesTo.conversation] Conversation
     * reference.
     *
     * @param {boolean} [parameters.activity.relatesTo.conversation.isGroup] Is
     * this a reference to a group.
     *
     * @param {string} [parameters.activity.relatesTo.conversation.id] The ID that
     * identifies the conversation. The ID is unique per channel. If the channel
     * starts the conversion, it sets this ID; otherwise, the bot sets this
     * property to the ID that it gets back in the response when it starts the
     * conversation (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [parameters.activity.relatesTo.conversation.name] A display
     * name that can be used to identify the conversation.
     *
     * @param {string} [parameters.activity.relatesTo.channelId] An ID that
     * uniquely identifies the channel in the conversation that this object
     * references.
     *
     * @param {string} [parameters.activity.relatesTo.serviceUrl] Service endpoint
     * where operations concerning the referenced conversation may be performed.
     *
     * @param {string} [parameters.activity.code] Code indicating why the
     * conversation has ended.
     *
     * @param {object} [parameters.channelData] Channel specific payload for
     * creating the conversation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConversationResourceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConversationResourceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConversationResourceResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createConversation(parameters: models.ConversationParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConversationResourceResponse>;
    createConversation(parameters: models.ConversationParameters, callback: ServiceCallback<models.ConversationResourceResponse>): void;
    createConversation(parameters: models.ConversationParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConversationResourceResponse>): void;


    /**
     * @summary SendToConversation
     *
     * This method allows you to send an activity to the end of a conversation.
     *
     * This is slightly different from ReplyToActivity.
     * * SendToConversation - will append the activity to the end of the
     * conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity - adds the activity as a reply to another activity, if the
     * channel supports it. If the channel does not support nested replies,
     * ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} activity Activity to send.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendToConversationWithHttpOperationResponse(conversationId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceResponse>>;

    /**
     * @summary SendToConversation
     *
     * This method allows you to send an activity to the end of a conversation.
     *
     * This is slightly different from ReplyToActivity.
     * * SendToConversation - will append the activity to the end of the
     * conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity - adds the activity as a reply to another activity, if the
     * channel supports it. If the channel does not support nested replies,
     * ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} activity Activity to send.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sendToConversation(conversationId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceResponse>;
    sendToConversation(conversationId: string, activity: models.Activity, callback: ServiceCallback<models.ResourceResponse>): void;
    sendToConversation(conversationId: string, activity: models.Activity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceResponse>): void;


    /**
     * @summary UpdateActivity
     *
     * Edit an existing activity.
     *
     * Some channels allow you to edit an existing activity to reflect the new
     * state of a bot conversation.
     *
     * For example, you might remove buttons from a message in the conversation
     * after the user has clicked one of the buttons. If successful, this operation
     * updates the specified activity within the specified conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId Activity Id to update.
     *
     * @param {object} activity replacement Activity.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateActivityWithHttpOperationResponse(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceResponse>>;

    /**
     * @summary UpdateActivity
     *
     * Edit an existing activity.
     *
     * Some channels allow you to edit an existing activity to reflect the new
     * state of a bot conversation.
     *
     * For example, you might remove buttons from a message in the conversation
     * after the user has clicked one of the buttons. If successful, this operation
     * updates the specified activity within the specified conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId Activity Id to update.
     *
     * @param {object} activity replacement Activity.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceResponse>;
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, callback: ServiceCallback<models.ResourceResponse>): void;
    updateActivity(conversationId: string, activityId: string, activity: models.Activity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceResponse>): void;


    /**
     * @summary ReplyToActivity
     *
     * This method allows you to reply to an activity.
     *
     * This is slightly different from SendToConversation().
     * * SendToConversation - will append the activity to the end of the
     * conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity - adds the activity as a reply to another activity, if the
     * channel supports it. If the channel does not support nested replies,
     * ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId ID of the activity.
     *
     * @param {object} activity Activity to send.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    replyToActivityWithHttpOperationResponse(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceResponse>>;

    /**
     * @summary ReplyToActivity
     *
     * This method allows you to reply to an activity.
     *
     * This is slightly different from SendToConversation().
     * * SendToConversation - will append the activity to the end of the
     * conversation according to the timestamp or semantics of the channel.
     * * ReplyToActivity - adds the activity as a reply to another activity, if the
     * channel supports it. If the channel does not support nested replies,
     * ReplyToActivity falls back to SendToConversation.
     *
     * Use ReplyToActivity when replying to a specific activity in the
     * conversation.
     *
     * Use SendToConversation in all other cases.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId ID of the activity.
     *
     * @param {object} activity Activity to send.
     *
     * @param {string} activity.type The type of the activity. Possible values
     * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
     * 'endOfConversation', 'event', 'invoke'
     *
     * @param {string} [activity.id] ID that uniquely identifies the activity on
     * the channel.
     *
     * @param {date} [activity.timestamp] Date and time that the message was sent
     * in the UTC time zone (set by service).
     *
     * @param {date} [activity.localTimestamp] Date and time that the message was
     * sent in the local time zone (set by client).
     *
     * @param {string} [activity.serviceUrl] Service endpoint where operations
     * concerning the activity may be performed.
     *
     * @param {string} [activity.channelId] ID of the channel where the activity
     * was sent.
     *
     * @param {object} activity.from Sender address.
     *
     * @param {object} [activity.conversation] Channel account information.
     *
     * @param {object} activity.recipient (Outbound to bot only) Bot's address that
     * received the message.
     *
     * @param {string} [activity.textFormat] Format of text fields. Default:
     * markdown. Possible values include: 'markdown', 'plain', 'xml'
     *
     * @param {string} [activity.attachmentLayout] Hint for how to deal with
     * multiple attachments: [list|carousel] Default: list. Possible values
     * include: 'list', 'carousel'
     *
     * @param {array} [activity.membersAdded] Members added to the conversation.
     * Present only if activity type is "conversationUpdate" and users joined the
     * conversation.
     *
     * @param {array} [activity.membersRemoved] Members removed from the
     * conversation. Present only if activity type is "conversationUpdate" and
     * users joined the conversation.
     *
     * @param {array} [activity.reactionsAdded] Reactions added to the activity.
     *
     * @param {array} [activity.reactionsRemoved] Reactions removed from the
     * activity.
     *
     * @param {string} [activity.topicName] The conversation's updated topic name.
     *
     * @param {boolean} [activity.historyDisclosed] True if prior history of the
     * channel is disclosed. Default value is false.
     *
     * @param {string} [activity.locale] Locale of the language that should be used
     * to display text within the message.
     *
     * @param {string} [activity.text] Content for the message.
     *
     * @param {string} [activity.speak] SSML Speak for TTS audio response.
     *
     * @param {string} [activity.inputHint] Value that indicates whether your bot
     * is accepting, expecting, or ignoring user input after the message is
     * delivered to the client. Possible values include: 'acceptingInput',
     * 'expectingInput', 'ignoringInput'
     *
     * @param {string} [activity.summary] Text to display if the channel cannot
     * render cards.
     *
     * @param {object} [activity.suggestedActions] SuggestedActions are used to
     * provide keyboard/quick-reply like behavior in many clients.
     *
     * @param {array} [activity.suggestedActions.to] Ids of the recipients that the
     * actions should be shown to. These Ids are relative to the channelId and a
     * subset of all recipients of the activity.
     *
     * @param {array} [activity.suggestedActions.actions] Actions that can be shown
     * to the user.
     *
     * @param {array} [activity.attachments] List of Attachments.
     *
     * @param {array} [activity.entities] Collection of Entity objects, each of
     * which contains metadata about this activity. Each Entity object is typed.
     *
     * @param {object} [activity.channelData] Channel-specific payload.
     *
     * @param {string} [activity.action] The action to apply or that was applied.
     *
     * Use the type property to determine context for the action. For example, if
     * type is contactRelationUpdate, the value of the action property would be add
     * if the user added your bot to their contacts list, or remove if they removed
     * your bot from their contacts list.
     *
     * @param {string} [activity.replyToId] The original ID this message is a
     * response to.
     *
     * @param {object} [activity.value] Open-ended value.
     *
     * @param {string} [activity.name] Name of the operation to invoke or the name
     * of the event.
     *
     * @param {object} [activity.relatesTo] Reference to another conversation or
     * activity.
     *
     * @param {string} [activity.relatesTo.activityId] (Optional) ID of the
     * activity to refer to.
     *
     * @param {object} [activity.relatesTo.user] (Optional) User participating in
     * this conversation.
     *
     * @param {object} [activity.relatesTo.bot] Bot participating in this
     * conversation.
     *
     * @param {string} [activity.relatesTo.bot.id] Channel id for the user or bot
     * on this channel (Example: joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.bot.name] Display friendly name.
     *
     * @param {object} [activity.relatesTo.conversation] Conversation reference.
     *
     * @param {boolean} [activity.relatesTo.conversation.isGroup] Is this a
     * reference to a group.
     *
     * @param {string} [activity.relatesTo.conversation.id] The ID that identifies
     * the conversation. The ID is unique per channel. If the channel starts the
     * conversion, it sets this ID; otherwise, the bot sets this property to the ID
     * that it gets back in the response when it starts the conversation (Example:
     * joe@smith.com, or @joesmith or 123456).
     *
     * @param {string} [activity.relatesTo.conversation.name] A display name that
     * can be used to identify the conversation.
     *
     * @param {string} [activity.relatesTo.channelId] An ID that uniquely
     * identifies the channel in the conversation that this object references.
     *
     * @param {string} [activity.relatesTo.serviceUrl] Service endpoint where
     * operations concerning the referenced conversation may be performed.
     *
     * @param {string} [activity.code] Code indicating why the conversation has
     * ended.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceResponse>;
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, callback: ServiceCallback<models.ResourceResponse>): void;
    replyToActivity(conversationId: string, activityId: string, activity: models.Activity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceResponse>): void;


    /**
     * @summary DeleteActivity
     *
     * Delete an existing activity.
     *
     * Some channels allow you to delete an existing activity. If successful, this
     * operation removes the specified activity from the specified conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId ID of activity to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteActivityWithHttpOperationResponse(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary DeleteActivity
     *
     * Delete an existing activity.
     *
     * Some channels allow you to delete an existing activity. If successful, this
     * operation removes the specified activity from the specified conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId ID of activity to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteActivity(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteActivity(conversationId: string, activityId: string, callback: ServiceCallback<void>): void;
    deleteActivity(conversationId: string, activityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary GetConversationMembers
     *
     * Enumerate the members of a conversation.
     *
     * This REST API takes a Conversation ID and returns an array of ChannelAccount
     * objects representing the members of the conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConversationMembersWithHttpOperationResponse(conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChannelAccount[]>>;

    /**
     * @summary GetConversationMembers
     *
     * Enumerate the members of a conversation.
     *
     * This REST API takes a Conversation ID and returns an array of ChannelAccount
     * objects representing the members of the conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConversationMembers(conversationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChannelAccount[]>;
    getConversationMembers(conversationId: string, callback: ServiceCallback<models.ChannelAccount[]>): void;
    getConversationMembers(conversationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChannelAccount[]>): void;


    /**
     * @summary GetActivityMembers
     *
     * Enumerate the members of an activity.
     *
     * This REST API takes a Conversation ID and an Activity ID, returning an array
     * of ChannelAccount objects representing the members of the particular
     * activity in the conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId Activity ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getActivityMembersWithHttpOperationResponse(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChannelAccount[]>>;

    /**
     * @summary GetActivityMembers
     *
     * Enumerate the members of an activity.
     *
     * This REST API takes a Conversation ID and an Activity ID, returning an array
     * of ChannelAccount objects representing the members of the particular
     * activity in the conversation.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {string} activityId Activity ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getActivityMembers(conversationId: string, activityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChannelAccount[]>;
    getActivityMembers(conversationId: string, activityId: string, callback: ServiceCallback<models.ChannelAccount[]>): void;
    getActivityMembers(conversationId: string, activityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChannelAccount[]>): void;


    /**
     * @summary UploadAttachment
     *
     * Upload an attachment directly into a channel's blob storage.
     *
     * This is useful because it allows you to store data in a compliant store when
     * dealing with enterprises.
     *
     * The response is a ResourceResponse which contains an Attachment ID which is
     * suitable for using with the attachments API.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} attachmentUpload Attachment data.
     *
     * @param {string} attachmentUpload.type Content-Type of the attachment.
     *
     * @param {string} [attachmentUpload.name] Name of the attachment.
     *
     * @param {buffer} attachmentUpload.originalBase64 Attachment content.
     *
     * @param {buffer} [attachmentUpload.thumbnailBase64] Attachment thumbnail.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadAttachmentWithHttpOperationResponse(conversationId: string, attachmentUpload: models.AttachmentData, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceResponse>>;

    /**
     * @summary UploadAttachment
     *
     * Upload an attachment directly into a channel's blob storage.
     *
     * This is useful because it allows you to store data in a compliant store when
     * dealing with enterprises.
     *
     * The response is a ResourceResponse which contains an Attachment ID which is
     * suitable for using with the attachments API.
     *
     * @param {string} conversationId Conversation ID.
     *
     * @param {object} attachmentUpload Attachment data.
     *
     * @param {string} attachmentUpload.type Content-Type of the attachment.
     *
     * @param {string} [attachmentUpload.name] Name of the attachment.
     *
     * @param {buffer} attachmentUpload.originalBase64 Attachment content.
     *
     * @param {buffer} [attachmentUpload.thumbnailBase64] Attachment thumbnail.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceResponse>;
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, callback: ServiceCallback<models.ResourceResponse>): void;
    uploadAttachment(conversationId: string, attachmentUpload: models.AttachmentData, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceResponse>): void;
}
