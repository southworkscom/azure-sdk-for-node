/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Parameters for creating a new conversation.
 *
 */
class ConversationParameters {
  /**
   * Create a ConversationParameters.
   * @member {boolean} [isGroup] Indicates if this is a group conversation.
   * @member {object} bot The bot address for this conversation.
   * @member {string} [bot.id] Channel id for the user or bot on this channel
   * (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [bot.name] Display friendly name.
   * @member {array} members Members to add to the conversation.
   * @member {string} [topicName] (Optional) Topic title of a conversation (if
   * supported by the channel).
   * @member {object} [activity] (Optional) Use this activity as the initial
   * message to the conversation when creating a new conversation.
   * @member {string} [activity.type] The type of the activity. Possible values
   * include: 'message', 'conversationUpdate', 'contactRelationUpdate',
   * 'typing', 'endOfConversation', 'event', 'invoke'
   * @member {string} [activity.id] ID that uniquely identifies the activity on
   * the channel.
   * @member {date} [activity.timestamp] Date and time that the message was
   * sent in the UTC time zone (set by service).
   * @member {date} [activity.localTimestamp] Date and time that the message
   * was sent in the local time zone (set by client).
   * @member {string} [activity.serviceUrl] Service endpoint where operations
   * concerning the activity may be performed.
   * @member {string} [activity.channelId] ID of the channel where the activity
   * was sent.
   * @member {object} [activity.from] Sender address.
   * @member {string} [activity.from.id] Channel id for the user or bot on this
   * channel (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.from.name] Display friendly name.
   * @member {object} [activity.conversation] Channel account information.
   * @member {boolean} [activity.conversation.isGroup] Is this a reference to a
   * group.
   * @member {string} [activity.conversation.id] The ID that identifies the
   * conversation. The ID is unique per channel. If the channel starts the
   * conversion, it sets this ID; otherwise, the bot sets this property to the
   * ID that it gets back in the response when it starts the conversation
   * (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.conversation.name] A display name that can be
   * used to identify the conversation.
   * @member {object} [activity.recipient] (Outbound to bot only) Bot's address
   * that received the message.
   * @member {string} [activity.recipient.id] Channel id for the user or bot on
   * this channel (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.recipient.name] Display friendly name.
   * @member {string} [activity.textFormat] Format of text fields. Default:
   * markdown. Possible values include: 'markdown', 'plain', 'xml'
   * @member {string} [activity.attachmentLayout] Hint for how to deal with
   * multiple attachments: [list|carousel] Default: list. Possible values
   * include: 'list', 'carousel'
   * @member {array} [activity.membersAdded] Members added to the conversation.
   * Present only if activity type is "conversationUpdate" and users joined the
   * conversation.
   * @member {array} [activity.membersRemoved] Members removed from the
   * conversation. Present only if activity type is "conversationUpdate" and
   * users joined the conversation.
   * @member {array} [activity.reactionsAdded] Reactions added to the activity.
   * @member {array} [activity.reactionsRemoved] Reactions removed from the
   * activity.
   * @member {string} [activity.topicName] The conversation's updated topic
   * name.
   * @member {boolean} [activity.historyDisclosed] True if prior history of the
   * channel is disclosed. Default value is false.
   * @member {string} [activity.locale] Locale of the language that should be
   * used to display text within the message.
   * @member {string} [activity.text] Content for the message.
   * @member {string} [activity.speak] SSML Speak for TTS audio response.
   * @member {string} [activity.inputHint] Value that indicates whether your
   * bot is accepting, expecting, or ignoring user input after the message is
   * delivered to the client. Possible values include: 'acceptingInput',
   * 'expectingInput', 'ignoringInput'
   * @member {string} [activity.summary] Text to display if the channel cannot
   * render cards.
   * @member {object} [activity.suggestedActions] SuggestedActions are used to
   * provide keyboard/quick-reply like behavior in many clients.
   * @member {array} [activity.suggestedActions.to] Ids of the recipients that
   * the actions should be shown to. These Ids are relative to the channelId
   * and a subset of all recipients of the activity.
   * @member {array} [activity.suggestedActions.actions] Actions that can be
   * shown to the user.
   * @member {array} [activity.attachments] List of Attachments.
   * @member {array} [activity.entities] Collection of Entity objects, each of
   * which contains metadata about this activity. Each Entity object is typed.
   * @member {object} [activity.channelData] Channel-specific payload.
   * @member {string} [activity.action] The action to apply or that was
   * applied.
   *
   * Use the type property to determine context for the action. For example, if
   * type is contactRelationUpdate, the value of the action property would be
   * add if the user added your bot to their contacts list, or remove if they
   * removed your bot from their contacts list.
   * @member {string} [activity.replyToId] The original ID this message is a
   * response to.
   * @member {object} [activity.value] Open-ended value.
   * @member {string} [activity.name] Name of the operation to invoke or the
   * name of the event.
   * @member {object} [activity.relatesTo] Reference to another conversation or
   * activity.
   * @member {string} [activity.relatesTo.activityId] (Optional) ID of the
   * activity to refer to.
   * @member {object} [activity.relatesTo.user] (Optional) User participating
   * in this conversation.
   * @member {string} [activity.relatesTo.user.id] Channel id for the user or
   * bot on this channel (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.relatesTo.user.name] Display friendly name.
   * @member {object} [activity.relatesTo.bot] Bot participating in this
   * conversation.
   * @member {string} [activity.relatesTo.bot.id] Channel id for the user or
   * bot on this channel (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.relatesTo.bot.name] Display friendly name.
   * @member {object} [activity.relatesTo.conversation] Conversation reference.
   * @member {boolean} [activity.relatesTo.conversation.isGroup] Is this a
   * reference to a group.
   * @member {string} [activity.relatesTo.conversation.id] The ID that
   * identifies the conversation. The ID is unique per channel. If the channel
   * starts the conversion, it sets this ID; otherwise, the bot sets this
   * property to the ID that it gets back in the response when it starts the
   * conversation (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [activity.relatesTo.conversation.name] A display name
   * that can be used to identify the conversation.
   * @member {string} [activity.relatesTo.channelId] An ID that uniquely
   * identifies the channel in the conversation that this object references.
   * @member {string} [activity.relatesTo.serviceUrl] Service endpoint where
   * operations concerning the referenced conversation may be performed.
   * @member {string} [activity.code] Code indicating why the conversation has
   * ended.
   * @member {object} [channelData] Channel specific payload for creating the
   * conversation.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConversationParameters
   *
   * @returns {object} metadata of ConversationParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConversationParameters',
      type: {
        name: 'Composite',
        className: 'ConversationParameters',
        modelProperties: {
          isGroup: {
            required: false,
            serializedName: 'isGroup',
            type: {
              name: 'Boolean'
            }
          },
          bot: {
            required: true,
            serializedName: 'bot',
            type: {
              name: 'Composite',
              className: 'ChannelAccount'
            }
          },
          members: {
            required: true,
            serializedName: 'members',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ChannelAccountElementType',
                  type: {
                    name: 'Composite',
                    className: 'ChannelAccount'
                  }
              }
            }
          },
          topicName: {
            required: false,
            serializedName: 'topicName',
            type: {
              name: 'String'
            }
          },
          activity: {
            required: false,
            serializedName: 'activity',
            type: {
              name: 'Composite',
              className: 'Activity'
            }
          },
          channelData: {
            required: false,
            serializedName: 'channelData',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = ConversationParameters;
