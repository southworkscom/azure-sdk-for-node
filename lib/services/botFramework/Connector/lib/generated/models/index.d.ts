/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as moment from "moment";


/**
 * @class
 * Initializes a new instance of the AttachmentView class.
 * @constructor
 * Attachment View name and size.
 *
 * @member {string} [viewId] View ID.
 * @member {number} [size] Size of the file.
 */
export interface AttachmentView {
  viewId?: string;
  size?: number;
}

/**
 * @class
 * Initializes a new instance of the AttachmentInfo class.
 * @constructor
 * Metadata for an attachment.
 *
 * @member {string} [name] Name of the attachment.
 * @member {string} type ContentType of the attachment.
 * @member {array} views attachment views.
 */
export interface AttachmentInfo {
  name?: string;
  type: string;
  views: AttachmentView[];
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Object representing error information.
 *
 * @member {string} [code] Error code. Possible values include: '400', '401',
 * '403', '404', '405', '429', '500', '503'
 * @member {string} [message] A description of the error.
 */
export interface ErrorModel {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * An HTTP API response.
 *
 * @member {object} [error] Error message.
 * @member {string} [error.code] Error code. Possible values include: '400',
 * '401', '403', '404', '405', '429', '500', '503'
 * @member {string} [error.message] A description of the error.
 */
export interface ErrorResponse {
  error?: ErrorModel;
}

/**
 * @class
 * Initializes a new instance of the ChannelAccount class.
 * @constructor
 * Channel account information needed to route a message.
 *
 * @member {string} [id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [name] Display friendly name.
 */
export interface ChannelAccount {
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationAccount class.
 * @constructor
 * Channel account information for a conversation.
 *
 * @member {boolean} [isGroup] Is this a reference to a group. Default value:
 * false .
 * @member {string} [id] The ID that identifies the conversation. The ID is
 * unique per channel. If the channel starts the conversion, it sets this ID;
 * otherwise, the bot sets this property to the ID that it gets back in the
 * response when it starts the conversation (Example: joe@smith.com, or
 * @joesmith or 123456).
 * @member {string} [name] A display name that can be used to identify the
 * conversation.
 */
export interface ConversationAccount {
  isGroup?: boolean;
  id?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the MessageReaction class.
 * @constructor
 * Message reaction object.
 *
 * @member {string} [type] Message reaction type.
 */
export interface MessageReaction {
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the CardAction class.
 * @constructor
 * A clickable action.
 *
 * @member {string} [type] The type of action implemented by this button.
 * @member {string} [title] Text description which appears on the button.
 * @member {string} [image] Image URL which will appear on the button, next to
 * text label.
 * @member {string} [text] Text for this action.
 * @member {string} [displayText] (Optional) text to display in the chat feed
 * if the button is clicked.
 * @member {object} [value] Supplementary parameter for action. Content of this
 * property depends on the ActionType.
 */
export interface CardAction {
  type?: string;
  title?: string;
  image?: string;
  text?: string;
  displayText?: string;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the SuggestedActions class.
 * @constructor
 * SuggestedActions that can be performed.
 *
 * @member {array} [to] Ids of the recipients that the actions should be shown
 * to. These Ids are relative to the channelId and a subset of all recipients
 * of the activity.
 * @member {array} [actions] Actions that can be shown to the user.
 */
export interface SuggestedActions {
  to?: string[];
  actions?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the Attachment class.
 * @constructor
 * An attachment within an activity.
 *
 * @member {string} [contentType] mimetype/Contenttype for the file.
 * @member {string} [contentUrl] URL for the content of the attachment.
 * Supported protocols are: HTTP, HTTPS, File, and Data.
 * @member {object} [content] Embedded content.
 * @member {string} [name] (OPTIONAL) The name of the attachment.
 * @member {string} [thumbnailUrl] (OPTIONAL) URL to a thumbnail image that the
 * channel can use if it supports using an alternative, smaller form of content
 * or contentUrl.
 */
export interface Attachment {
  contentType?: string;
  contentUrl?: string;
  content?: any;
  name?: string;
  thumbnailUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Entity class.
 * @constructor
 * Object of schema.org types.
 *
 * @member {string} [type] Entity Type (typically from schema.org types).
 */
export interface Entity {
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationReference class.
 * @constructor
 * An object relating to a particular point in a conversation.
 *
 * @member {string} [activityId] (Optional) ID of the activity to refer to.
 * @member {object} [user] (Optional) User participating in this conversation.
 * @member {string} [user.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [user.name] Display friendly name.
 * @member {object} [bot] Bot participating in this conversation.
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [bot.name] Display friendly name.
 * @member {object} [conversation] Conversation reference.
 * @member {boolean} [conversation.isGroup] Is this a reference to a group.
 * @member {string} [conversation.id] The ID that identifies the conversation.
 * The ID is unique per channel. If the channel starts the conversion, it sets
 * this ID; otherwise, the bot sets this property to the ID that it gets back
 * in the response when it starts the conversation (Example: joe@smith.com, or
 * @joesmith or 123456).
 * @member {string} [conversation.name] A display name that can be used to
 * identify the conversation.
 * @member {string} [channelId] An ID that uniquely identifies the channel in
 * the conversation that this object references.
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the referenced conversation may be performed.
 */
export interface ConversationReference {
  activityId?: string;
  user?: ChannelAccount;
  bot?: ChannelAccount;
  conversation?: ConversationAccount;
  channelId?: string;
  serviceUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Activity class.
 * @constructor
 * An Activity is the basic communication type for the Bot Framework 3.0
 * protocol.
 *
 * @member {string} type The type of the activity. Possible values include:
 * 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
 * 'endOfConversation', 'event', 'invoke'
 * @member {string} [id] ID that uniquely identifies the activity on the
 * channel.
 * @member {date} [timestamp] Date and time that the message was sent in the
 * UTC time zone (set by service).
 * @member {date} [localTimestamp] Date and time that the message was sent in
 * the local time zone (set by client).
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the activity may be performed.
 * @member {string} [channelId] ID of the channel where the activity was sent.
 * @member {object} from Sender address.
 * @member {string} [from.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [from.name] Display friendly name.
 * @member {object} [conversation] Channel account information.
 * @member {boolean} [conversation.isGroup] Is this a reference to a group.
 * @member {string} [conversation.id] The ID that identifies the conversation.
 * The ID is unique per channel. If the channel starts the conversion, it sets
 * this ID; otherwise, the bot sets this property to the ID that it gets back
 * in the response when it starts the conversation (Example: joe@smith.com, or
 * @joesmith or 123456).
 * @member {string} [conversation.name] A display name that can be used to
 * identify the conversation.
 * @member {object} recipient (Outbound to bot only) Bot's address that
 * received the message.
 * @member {string} [recipient.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [recipient.name] Display friendly name.
 * @member {string} [textFormat] Format of text fields. Default: markdown.
 * Possible values include: 'markdown', 'plain', 'xml'. Default value:
 * 'markdown' .
 * @member {string} [attachmentLayout] Hint for how to deal with multiple
 * attachments: [list|carousel] Default: list. Possible values include: 'list',
 * 'carousel'. Default value: 'list' .
 * @member {array} [membersAdded] Members added to the conversation. Present
 * only if activity type is "conversationUpdate" and users joined the
 * conversation.
 * @member {array} [membersRemoved] Members removed from the conversation.
 * Present only if activity type is "conversationUpdate" and users joined the
 * conversation.
 * @member {array} [reactionsAdded] Reactions added to the activity.
 * @member {array} [reactionsRemoved] Reactions removed from the activity.
 * @member {string} [topicName] The conversation's updated topic name.
 * @member {boolean} [historyDisclosed] True if prior history of the channel is
 * disclosed. Default value is false.
 * @member {string} [locale] Locale of the language that should be used to
 * display text within the message.
 * @member {string} [text] Content for the message.
 * @member {string} [speak] SSML Speak for TTS audio response.
 * @member {string} [inputHint] Value that indicates whether your bot is
 * accepting, expecting, or ignoring user input after the message is delivered
 * to the client. Possible values include: 'acceptingInput', 'expectingInput',
 * 'ignoringInput'
 * @member {string} [summary] Text to display if the channel cannot render
 * cards.
 * @member {object} [suggestedActions] SuggestedActions are used to provide
 * keyboard/quick-reply like behavior in many clients.
 * @member {array} [suggestedActions.to] Ids of the recipients that the actions
 * should be shown to. These Ids are relative to the channelId and a subset of
 * all recipients of the activity.
 * @member {array} [suggestedActions.actions] Actions that can be shown to the
 * user.
 * @member {array} [attachments] List of Attachments.
 * @member {array} [entities] Collection of Entity objects, each of which
 * contains metadata about this activity. Each Entity object is typed.
 * @member {object} [channelData] Channel-specific payload.
 * @member {string} [action] The action to apply or that was applied.
 *
 * Use the type property to determine context for the action. For example, if
 * type is contactRelationUpdate, the value of the action property would be add
 * if the user added your bot to their contacts list, or remove if they removed
 * your bot from their contacts list.
 * @member {string} [replyToId] The original ID this message is a response to.
 * @member {object} [value] Open-ended value.
 * @member {string} [name] Name of the operation to invoke or the name of the
 * event.
 * @member {object} [relatesTo] Reference to another conversation or activity.
 * @member {string} [relatesTo.activityId] (Optional) ID of the activity to
 * refer to.
 * @member {object} [relatesTo.user] (Optional) User participating in this
 * conversation.
 * @member {string} [relatesTo.user.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [relatesTo.user.name] Display friendly name.
 * @member {object} [relatesTo.bot] Bot participating in this conversation.
 * @member {string} [relatesTo.bot.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [relatesTo.bot.name] Display friendly name.
 * @member {object} [relatesTo.conversation] Conversation reference.
 * @member {boolean} [relatesTo.conversation.isGroup] Is this a reference to a
 * group.
 * @member {string} [relatesTo.conversation.id] The ID that identifies the
 * conversation. The ID is unique per channel. If the channel starts the
 * conversion, it sets this ID; otherwise, the bot sets this property to the ID
 * that it gets back in the response when it starts the conversation (Example:
 * joe@smith.com, or @joesmith or 123456).
 * @member {string} [relatesTo.conversation.name] A display name that can be
 * used to identify the conversation.
 * @member {string} [relatesTo.channelId] An ID that uniquely identifies the
 * channel in the conversation that this object references.
 * @member {string} [relatesTo.serviceUrl] Service endpoint where operations
 * concerning the referenced conversation may be performed.
 * @member {string} [code] Code indicating why the conversation has ended.
 */
export interface Activity {
  type: string;
  id?: string;
  timestamp?: Date;
  localTimestamp?: Date;
  serviceUrl?: string;
  channelId?: string;
  from: ChannelAccount;
  conversation?: ConversationAccount;
  recipient: ChannelAccount;
  textFormat?: string;
  attachmentLayout?: string;
  membersAdded?: ChannelAccount[];
  membersRemoved?: ChannelAccount[];
  reactionsAdded?: MessageReaction[];
  reactionsRemoved?: MessageReaction[];
  topicName?: string;
  historyDisclosed?: boolean;
  locale?: string;
  text?: string;
  speak?: string;
  inputHint?: string;
  summary?: string;
  suggestedActions?: SuggestedActions;
  attachments?: Attachment[];
  entities?: Entity[];
  channelData?: any;
  action?: string;
  replyToId?: string;
  value?: any;
  name?: string;
  relatesTo?: ConversationReference;
  code?: string;
}

/**
 * @class
 * Initializes a new instance of the ConversationParameters class.
 * @constructor
 * Parameters for creating a new conversation.
 *
 * @member {boolean} [isGroup] Indicates if this is a group conversation.
 * @member {object} bot The bot address for this conversation.
 * @member {string} [bot.id] Channel id for the user or bot on this channel
 * (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [bot.name] Display friendly name.
 * @member {array} members Members to add to the conversation.
 * @member {string} [topicName] (Optional) Topic title of a conversation (if
 * supported by the channel).
 * @member {object} [activity] (Optional) Use this activity as the initial
 * message to the conversation when creating a new conversation.
 * @member {string} [activity.type] The type of the activity. Possible values
 * include: 'message', 'conversationUpdate', 'contactRelationUpdate', 'typing',
 * 'endOfConversation', 'event', 'invoke'
 * @member {string} [activity.id] ID that uniquely identifies the activity on
 * the channel.
 * @member {date} [activity.timestamp] Date and time that the message was sent
 * in the UTC time zone (set by service).
 * @member {date} [activity.localTimestamp] Date and time that the message was
 * sent in the local time zone (set by client).
 * @member {string} [activity.serviceUrl] Service endpoint where operations
 * concerning the activity may be performed.
 * @member {string} [activity.channelId] ID of the channel where the activity
 * was sent.
 * @member {object} [activity.from] Sender address.
 * @member {string} [activity.from.id] Channel id for the user or bot on this
 * channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.from.name] Display friendly name.
 * @member {object} [activity.conversation] Channel account information.
 * @member {boolean} [activity.conversation.isGroup] Is this a reference to a
 * group.
 * @member {string} [activity.conversation.id] The ID that identifies the
 * conversation. The ID is unique per channel. If the channel starts the
 * conversion, it sets this ID; otherwise, the bot sets this property to the ID
 * that it gets back in the response when it starts the conversation (Example:
 * joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.conversation.name] A display name that can be
 * used to identify the conversation.
 * @member {object} [activity.recipient] (Outbound to bot only) Bot's address
 * that received the message.
 * @member {string} [activity.recipient.id] Channel id for the user or bot on
 * this channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.recipient.name] Display friendly name.
 * @member {string} [activity.textFormat] Format of text fields. Default:
 * markdown. Possible values include: 'markdown', 'plain', 'xml'
 * @member {string} [activity.attachmentLayout] Hint for how to deal with
 * multiple attachments: [list|carousel] Default: list. Possible values
 * include: 'list', 'carousel'
 * @member {array} [activity.membersAdded] Members added to the conversation.
 * Present only if activity type is "conversationUpdate" and users joined the
 * conversation.
 * @member {array} [activity.membersRemoved] Members removed from the
 * conversation. Present only if activity type is "conversationUpdate" and
 * users joined the conversation.
 * @member {array} [activity.reactionsAdded] Reactions added to the activity.
 * @member {array} [activity.reactionsRemoved] Reactions removed from the
 * activity.
 * @member {string} [activity.topicName] The conversation's updated topic name.
 * @member {boolean} [activity.historyDisclosed] True if prior history of the
 * channel is disclosed. Default value is false.
 * @member {string} [activity.locale] Locale of the language that should be
 * used to display text within the message.
 * @member {string} [activity.text] Content for the message.
 * @member {string} [activity.speak] SSML Speak for TTS audio response.
 * @member {string} [activity.inputHint] Value that indicates whether your bot
 * is accepting, expecting, or ignoring user input after the message is
 * delivered to the client. Possible values include: 'acceptingInput',
 * 'expectingInput', 'ignoringInput'
 * @member {string} [activity.summary] Text to display if the channel cannot
 * render cards.
 * @member {object} [activity.suggestedActions] SuggestedActions are used to
 * provide keyboard/quick-reply like behavior in many clients.
 * @member {array} [activity.suggestedActions.to] Ids of the recipients that
 * the actions should be shown to. These Ids are relative to the channelId and
 * a subset of all recipients of the activity.
 * @member {array} [activity.suggestedActions.actions] Actions that can be
 * shown to the user.
 * @member {array} [activity.attachments] List of Attachments.
 * @member {array} [activity.entities] Collection of Entity objects, each of
 * which contains metadata about this activity. Each Entity object is typed.
 * @member {object} [activity.channelData] Channel-specific payload.
 * @member {string} [activity.action] The action to apply or that was applied.
 *
 * Use the type property to determine context for the action. For example, if
 * type is contactRelationUpdate, the value of the action property would be add
 * if the user added your bot to their contacts list, or remove if they removed
 * your bot from their contacts list.
 * @member {string} [activity.replyToId] The original ID this message is a
 * response to.
 * @member {object} [activity.value] Open-ended value.
 * @member {string} [activity.name] Name of the operation to invoke or the name
 * of the event.
 * @member {object} [activity.relatesTo] Reference to another conversation or
 * activity.
 * @member {string} [activity.relatesTo.activityId] (Optional) ID of the
 * activity to refer to.
 * @member {object} [activity.relatesTo.user] (Optional) User participating in
 * this conversation.
 * @member {string} [activity.relatesTo.user.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.relatesTo.user.name] Display friendly name.
 * @member {object} [activity.relatesTo.bot] Bot participating in this
 * conversation.
 * @member {string} [activity.relatesTo.bot.id] Channel id for the user or bot
 * on this channel (Example: joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.relatesTo.bot.name] Display friendly name.
 * @member {object} [activity.relatesTo.conversation] Conversation reference.
 * @member {boolean} [activity.relatesTo.conversation.isGroup] Is this a
 * reference to a group.
 * @member {string} [activity.relatesTo.conversation.id] The ID that identifies
 * the conversation. The ID is unique per channel. If the channel starts the
 * conversion, it sets this ID; otherwise, the bot sets this property to the ID
 * that it gets back in the response when it starts the conversation (Example:
 * joe@smith.com, or @joesmith or 123456).
 * @member {string} [activity.relatesTo.conversation.name] A display name that
 * can be used to identify the conversation.
 * @member {string} [activity.relatesTo.channelId] An ID that uniquely
 * identifies the channel in the conversation that this object references.
 * @member {string} [activity.relatesTo.serviceUrl] Service endpoint where
 * operations concerning the referenced conversation may be performed.
 * @member {string} [activity.code] Code indicating why the conversation has
 * ended.
 * @member {object} [channelData] Channel specific payload for creating the
 * conversation.
 */
export interface ConversationParameters {
  isGroup?: boolean;
  bot: ChannelAccount;
  members: ChannelAccount[];
  topicName?: string;
  activity?: Activity;
  channelData?: any;
}

/**
 * @class
 * Initializes a new instance of the ConversationResourceResponse class.
 * @constructor
 * A response containing a resource.
 *
 * @member {string} [activityId] ID of the Activity (if sent).
 * @member {string} [serviceUrl] Service endpoint where operations concerning
 * the conversation may be performed.
 * @member {string} [id] Id of the resource.
 */
export interface ConversationResourceResponse {
  activityId?: string;
  serviceUrl?: string;
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceResponse class.
 * @constructor
 * A response containing a resource ID.
 *
 * @member {string} [id] Id of the resource.
 */
export interface ResourceResponse {
  id?: string;
}

/**
 * @class
 * Initializes a new instance of the AttachmentData class.
 * @constructor
 * Attachment data.
 *
 * @member {string} type Content-Type of the attachment.
 * @member {string} [name] Name of the attachment.
 * @member {buffer} originalBase64 Attachment content.
 * @member {buffer} [thumbnailBase64] Attachment thumbnail.
 */
export interface AttachmentData {
  type: string;
  name?: string;
  originalBase64: Buffer;
  thumbnailBase64?: Buffer;
}

/**
 * @class
 * Initializes a new instance of the CardImage class.
 * @constructor
 * An image on a card.
 *
 * @member {string} [url] URL Thumbnail image for major content property.
 * @member {string} [alt] Image description intended for screen readers.
 * @member {object} [tap] Action assigned to specific Attachment. E.g.navigate
 * to specific URL or play/open media content.
 * @member {string} [tap.type] The type of action implemented by this button.
 * @member {string} [tap.title] Text description which appears on the button.
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label.
 * @member {string} [tap.text] Text for this action.
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked.
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType.
 */
export interface CardImage {
  url?: string;
  alt?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the HeroCard class.
 * @constructor
 * A Hero card (card with a single, large image).
 *
 * @member {string} [title] Title of the card.
 * @member {string} [subtitle] Subtitle of the card.
 * @member {string} [text] Text for the card.
 * @member {array} [images] Array of images for the card.
 * @member {array} [buttons] Set of actions applicable to the current card.
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself.
 * @member {string} [tap.type] The type of action implemented by this button.
 * @member {string} [tap.title] Text description which appears on the button.
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label.
 * @member {string} [tap.text] Text for this action.
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked.
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType.
 */
export interface HeroCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the ThumbnailCard class.
 * @constructor
 * A thumbnail card (card with a single, small thumbnail image).
 *
 * @member {string} [title] Title of the card.
 * @member {string} [subtitle] Subtitle of the card.
 * @member {string} [text] Text for the card.
 * @member {array} [images] Array of images for the card.
 * @member {array} [buttons] Set of actions applicable to the current card.
 * @member {object} [tap] This action will be activated when user taps on the
 * card itself.
 * @member {string} [tap.type] The type of action implemented by this button.
 * @member {string} [tap.title] Text description which appears on the button.
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label.
 * @member {string} [tap.text] Text for this action.
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked.
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType.
 */
export interface ThumbnailCard {
  title?: string;
  subtitle?: string;
  text?: string;
  images?: CardImage[];
  buttons?: CardAction[];
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the ReceiptItem class.
 * @constructor
 * An item on a receipt card.
 *
 * @member {string} [title] Title of the line item.
 * @member {string} [subtitle] Subtitle to be displayed under the line item’s
 * title.
 * @member {string} [text] Description of the line item.
 * @member {object} [image] Thumbnail image to display next to the line item.
 * @member {string} [image.url] URL Thumbnail image for major content property.
 * @member {string} [image.alt] Image description intended for screen readers.
 * @member {object} [image.tap] Action assigned to specific Attachment.
 * E.g.navigate to specific URL or play/open media content.
 * @member {string} [image.tap.type] The type of action implemented by this
 * button.
 * @member {string} [image.tap.title] Text description which appears on the
 * button.
 * @member {string} [image.tap.image] Image URL which will appear on the
 * button, next to text label.
 * @member {string} [image.tap.text] Text for this action.
 * @member {string} [image.tap.displayText] (Optional) text to display in the
 * chat feed if the button is clicked.
 * @member {object} [image.tap.value] Supplementary parameter for action.
 * Content of this property depends on the ActionType.
 * @member {string} [price] A currency-formatted string that specifies the
 * total price of all units purchased.
 * @member {string} [quantity] A numeric string that specifies the number of
 * units purchased.
 * @member {object} [tap] This action will be activated when user taps on the
 * Item bubble.
 * @member {string} [tap.type] The type of action implemented by this button.
 * @member {string} [tap.title] Text description which appears on the button.
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label.
 * @member {string} [tap.text] Text for this action.
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked.
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType.
 */
export interface ReceiptItem {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: CardImage;
  price?: string;
  quantity?: string;
  tap?: CardAction;
}

/**
 * @class
 * Initializes a new instance of the Fact class.
 * @constructor
 * Set of key-value pairs. Advantage of this section is that key and value
 * properties will be rendered with default style information with some
 * delimiter between them. So there is no need for developer to specify style
 * information.
 *
 * @member {string} [key] Name of the fact.
 * @member {string} [value] Value of the fact.
 */
export interface Fact {
  key?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ReceiptCard class.
 * @constructor
 * A receipt card.
 *
 * @member {string} [title] Title displayed at the top of the receipt.
 * @member {array} [items] Array of Receipt Items.
 * @member {array} [facts] Array of Fact objects (key-value pairs) that specify
 * information about the purchase.
 * @member {object} [tap] This action will be activated when user taps on the
 * card.
 * @member {string} [tap.type] The type of action implemented by this button.
 * @member {string} [tap.title] Text description which appears on the button.
 * @member {string} [tap.image] Image URL which will appear on the button, next
 * to text label.
 * @member {string} [tap.text] Text for this action.
 * @member {string} [tap.displayText] (Optional) text to display in the chat
 * feed if the button is clicked.
 * @member {object} [tap.value] Supplementary parameter for action. Content of
 * this property depends on the ActionType.
 * @member {string} [total] A currency-formatted string that specifies the
 * total purchase price, including all applicable taxes.
 * @member {string} [tax] A currency-formatted string that specifies the amount
 * of tax applied to the purchase.
 * @member {string} [vat] A currency-formatted string that specifies the amount
 * of value added tax (VAT) applied to the purchase price.
 * @member {array} [buttons] Set of actions applicable to the current card.
 */
export interface ReceiptCard {
  title?: string;
  items?: ReceiptItem[];
  facts?: Fact[];
  tap?: CardAction;
  total?: string;
  tax?: string;
  vat?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the SignInCard class.
 * @constructor
 * A card representing a request to sign in.
 *
 * @member {string} [text] Text for signIn request.
 * @member {array} [buttons] Action to use to perform signIn.
 */
export interface SignInCard {
  text?: string;
  buttons?: CardAction[];
}

/**
 * @class
 * Initializes a new instance of the ThumbnailUrl class.
 * @constructor
 * Object describing a media thumbnail.
 *
 * @member {string} [url] URL pointing to an thumbnail to use for media
 * content.
 * @member {string} [alt] Alt text to display for screen readers on the
 * thumbnail image.
 */
export interface ThumbnailUrl {
  url?: string;
  alt?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaUrl class.
 * @constructor
 * MediaUrl data.
 *
 * @member {string} [url] Url for the media.
 * @member {string} [profile] Optional profile hint to the client to
 * differentiate multiple MediaUrl objects from each other.
 */
export interface MediaUrl {
  url?: string;
  profile?: string;
}

/**
 * @class
 * Initializes a new instance of the AudioCard class.
 * @constructor
 * A audio card.
 *
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "9:16".
 * @member {string} [title] Title of the card.
 * @member {string} [subtitle] Subtitle of the card.
 * @member {string} [text] Text of the card.
 * @member {object} [image] Thumbnail placeholder.
 * @member {string} [image.url] URL pointing to an thumbnail to use for media
 * content.
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image.
 * @member {array} [media] Array of media Url objects.
 * @member {array} [buttons] Set of actions applicable to the current card.
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default: true).
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default: true).
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default: true).
 * @member {object} [value] Supplementary parameter for this card.
 */
export interface AudioCard {
  aspect?: string;
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the AnimationCard class.
 * @constructor
 * An animation card (Ex: gif or short video clip).
 *
 * @member {string} [title] Title of the card.
 * @member {string} [subtitle] Subtitle of the card.
 * @member {string} [text] Text of the card.
 * @member {object} [image] Thumbnail placeholder.
 * @member {string} [image.url] URL pointing to an thumbnail to use for media
 * content.
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image.
 * @member {array} [media] Array of media Url objects.
 * @member {array} [buttons] Set of actions applicable to the current card.
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default: true).
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default: true).
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default: true).
 * @member {object} [value] Supplementary parameter for this card.
 */
export interface AnimationCard {
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the VideoCard class.
 * @constructor
 * A video card.
 *
 * @member {string} [aspect] Aspect ratio of thumbnail/media placeholder,
 * allowed values are "16:9" and "9:16".
 * @member {string} [title] Title of the card.
 * @member {string} [subtitle] Subtitle of the card.
 * @member {string} [text] Text of the card.
 * @member {object} [image] Thumbnail placeholder.
 * @member {string} [image.url] URL pointing to an thumbnail to use for media
 * content.
 * @member {string} [image.alt] Alt text to display for screen readers on the
 * thumbnail image.
 * @member {array} [media] Array of media Url objects.
 * @member {array} [buttons] Set of actions applicable to the current card.
 * @member {boolean} [shareable] Is it OK for this content to be shareable with
 * others (default: true).
 * @member {boolean} [autoloop] Should the client loop playback at end of
 * content (default: true).
 * @member {boolean} [autostart] Should the client automatically start playback
 * of video in this card (default: true).
 * @member {object} [value] Supplementary parameter for this card.
 */
export interface VideoCard {
  aspect?: string;
  title?: string;
  subtitle?: string;
  text?: string;
  image?: ThumbnailUrl;
  media?: MediaUrl[];
  buttons?: CardAction[];
  shareable?: boolean;
  autoloop?: boolean;
  autostart?: boolean;
  value?: any;
}

/**
 * @class
 * Initializes a new instance of the GeoCoordinates class.
 * @constructor
 * GeoCoordinates (entity type: "https://schema.org/GeoCoordinates").
 *
 * @member {number} [elevation] Elevation of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {number} [latitude] Latitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {number} [longitude] Longitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {string} [type] The type of this object. Always set to
 * GeoCoordinates.
 * @member {string} [name] Name of the location.
 */
export interface GeoCoordinates {
  elevation?: number;
  latitude?: number;
  longitude?: number;
  type?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the MediaEventValue class.
 * @constructor
 * Supplementary parameter for media events.
 *
 * @member {object} [cardValue] Callback parameter specified in the Value field
 * of the MediaCard that originated this event.
 */
export interface MediaEventValue {
  cardValue?: any;
}

/**
 * @class
 * Initializes a new instance of the Place class.
 * @constructor
 * Place (entity type: "https://schema.org/Place").
 *
 * @member {object} [address] Address of the place (may be `string` or complex
 * object of type "PostalAddress").
 * @member {object} [geo] A GeoCoordinates object that specifies the
 * geographical coordinates of the place.
 * @member {number} [geo.elevation] Elevation of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {number} [geo.latitude] Latitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {number} [geo.longitude] Longitude of the location [WGS
 * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
 * @member {string} [geo.type] The type of this object. Always set to
 * GeoCoordinates.
 * @member {string} [geo.name] Name of the location.
 * @member {object} [hasMap] Map to the place (may be `string` (URL) or complex
 * object of type "Map").
 * @member {string} [type] This object's type. Always set to Place.
 * @member {string} [name] Name of the place.
 */
export interface Place {
  address?: any;
  geo?: GeoCoordinates;
  hasMap?: any;
  type?: string;
  name?: string;
}
