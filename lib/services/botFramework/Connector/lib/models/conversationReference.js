/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object relating to a particular point in a conversation.
 *
 */
class ConversationReference {
  /**
   * Create a ConversationReference.
   * @member {string} [activityId] (Optional) ID of the activity to refer to.
   * @member {object} [user] (Optional) User participating in this
   * conversation.
   * @member {string} [user.id] Channel id for the user or bot on this channel
   * (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [user.name] Display friendly name.
   * @member {object} [bot] Bot participating in this conversation.
   * @member {string} [bot.id] Channel id for the user or bot on this channel
   * (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [bot.name] Display friendly name.
   * @member {object} [conversation] Conversation reference.
   * @member {boolean} [conversation.isGroup] Is this a reference to a group.
   * @member {string} [conversation.id] The ID that identifies the
   * conversation. The ID is unique per channel. If the channel starts the
   * conversion, it sets this ID; otherwise, the bot sets this property to the
   * ID that it gets back in the response when it starts the conversation
   * (Example: joe@smith.com, or @joesmith or 123456).
   * @member {string} [conversation.name] A display name that can be used to
   * identify the conversation.
   * @member {string} [channelId] An ID that uniquely identifies the channel in
   * the conversation that this object references.
   * @member {string} [serviceUrl] Service endpoint where operations concerning
   * the referenced conversation may be performed.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConversationReference
   *
   * @returns {object} metadata of ConversationReference
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConversationReference',
      type: {
        name: 'Composite',
        className: 'ConversationReference',
        modelProperties: {
          activityId: {
            required: false,
            serializedName: 'activityId',
            type: {
              name: 'String'
            }
          },
          user: {
            required: false,
            serializedName: 'user',
            type: {
              name: 'Composite',
              className: 'ChannelAccount'
            }
          },
          bot: {
            required: false,
            serializedName: 'bot',
            type: {
              name: 'Composite',
              className: 'ChannelAccount'
            }
          },
          conversation: {
            required: false,
            serializedName: 'conversation',
            type: {
              name: 'Composite',
              className: 'ConversationAccount'
            }
          },
          channelId: {
            required: false,
            serializedName: 'channelId',
            type: {
              name: 'String'
            }
          },
          serviceUrl: {
            required: false,
            serializedName: 'serviceUrl',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ConversationReference;
