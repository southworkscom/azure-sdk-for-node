/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Place (entity type: "https://schema.org/Place").
 *
 */
class Place {
  /**
   * Create a Place.
   * @member {object} [address] Address of the place (may be `string` or
   * complex object of type "PostalAddress").
   * @member {object} [geo] A GeoCoordinates object that specifies the
   * geographical coordinates of the place.
   * @member {number} [geo.elevation] Elevation of the location [WGS
   * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
   * @member {number} [geo.latitude] Latitude of the location [WGS
   * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
   * @member {number} [geo.longitude] Longitude of the location [WGS
   * 84](https://en.wikipedia.org/wiki/World_Geodetic_System).
   * @member {string} [geo.type] The type of this object. Always set to
   * GeoCoordinates.
   * @member {string} [geo.name] Name of the location.
   * @member {object} [hasMap] Map to the place (may be `string` (URL) or
   * complex object of type "Map").
   * @member {string} [type] This object's type. Always set to Place.
   * @member {string} [name] Name of the place.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Place
   *
   * @returns {object} metadata of Place
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Place',
      type: {
        name: 'Composite',
        className: 'Place',
        modelProperties: {
          address: {
            required: false,
            serializedName: 'address',
            type: {
              name: 'Object'
            }
          },
          geo: {
            required: false,
            serializedName: 'geo',
            type: {
              name: 'Composite',
              className: 'GeoCoordinates'
            }
          },
          hasMap: {
            required: false,
            serializedName: 'hasMap',
            type: {
              name: 'Object'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Place;
